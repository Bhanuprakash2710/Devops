* Docker is a container technology. A Tool for creating and managing containers.

* In Dockerfile we use COPY and ADD to copy the files from host system to docker images .

* We use COPY command to copy only the files .

* But we use ADD command to copy files and also copt the executable files (like .jar files).

* In Dockerfile we use  both CMD and ENTRYPOINT define commands to be run when a container starts, but they behave differently.

* ENTRYPOINT when you want your container to run a specific executable always (e.g., a script or binary).

* CMD when you want to provide default parameters or a default command that can be easily overridden.

* If we use CMD command , it specifies the default command and arguments for the container, and It can be overridden by passing a command at the end of the docker run command.

* If we use CMD command it will override the content in the dockerfile and only use while given at docker run.

* If we use ENTRYPOINT command , It specifies the main executable for the container, which cannot be overridden easily.

* Overridable: Arguments can be appended but not the executable itself unless you use the --entrypoint flag in docker run.

* If we use ENTRYPOINT command it wont override the data , it will append the data .

* Docker Engine is responsible to maintain and create the containers.

* To get the details of a running container use -> docker exec container-name/id cat /etc/hosts

* docker run -d is used to run docker container in detached mode i.e running docker container in background.

* If we run docker container without -d detached mode then the container will run on the cli until the container stops. It will disturb in using another commands and operations.

* so it is recomanded to use -d detached mode when you run a docker container.

* To remove an docker image use -> docker rmi image-name.

* To inspect the container use -> docker inspect container-name/id

* map port 8080 on the container to 38282 on the host. -> -p 38282:8080.

* To set environment variable to run command use -> docker run -d -e environmental_variable=value image_name

* docker run -d --name webapp --network wep-sql-network -e DB-HOST=db-host -e DB-PASSWORD=db_pass123 --link mysqldb:mysqldb bhanuprakash2710/python-app:v1

* To debug any issue with docker container use -> docker exec -it <container_name_or_id> /bin/bash

* it will work only for the running containers.

* We use copy in dockerfile to only the copy the files 

* We use add in dockerfile to copy , extract the .tar files and download the files from url .

*  Variant	    Size	           Base OS	                           Pros	                                                       Cons

-> openjdk	    Large		   Debian	  			   Full-featured, good for dev	                               Heavy, not optimized for prod

-> openjdk-slim	    Medium		   Debian				   Smaller, fewer attack vectors	           	       Lacks some dev/debug tools

-> openjdk-alpine   Smallest	           Alpine				   Tiny, fast to download/deploy	                       Compatibility issues with some libs


* To debug the docker container by going into its directories use it will take the root previlages access -> sudo -i  





***************************************** volumes *************************************

* In docker the data will be stored in local system where the docker cintainer is running i.e in read-write layer. It is stored with the help of volumes.

* Volumes will be used when the container is stopped suddenly the data loss should not happen , so the data will be stored in local system.

* You can set up volumes to connect some folder outside of a container to a folder inside of a container.

* We use bindmount to provide live data to the container i.e no rebuilding of image is required.

* to check the data inside volumes in local go to -> cd /var/lib/docker/volumes/<volume_name>/_data

* When the container restarts then the data in the local will be copied inside the container , also when the data is added to a running container then the data will be copied to local .

* Volumes mostly used for the database containers.




***************************************** Network *************************************

* Using network container to container communication will happen 

* A container needs to communicate with any container or internet there will be no extra settings.

* For example there is outside api where the application needs to communicate with it , then there will be no issue in communication.

* To create a network in docker use docker create network network-name 

* To check the environment variables in a container use -> docker inspect command.

* To check what networks runs in the current system use -> docker network ls

* To check network details of specific container use -> docker inspect container-id/name . In that under networks section.

* Also use this command for networks -> docker network ls and docker network inspect network-name

* If a database in a centralized system and we need to communicate with it using docker container we can use 
  environment:
  - DB_HOST=192.168.1.10
  - DB_PORT=1521
  - DB_USER=yourusername
  - DB_PASS=yourpassword

* Docker networking modes:

* bridge (Default for standalone containers)

-> Behavior: Each container gets its own internal IP and connects via a private bridge network.

-> Use Case: Isolated communication between containers on the same host.

* host

-> Behavior: Container shares the hostâ€™s network stack directly (no isolation).

-> Use Case: When performance is critical (e.g., high-speed networking) or you need direct access to host ports.
 
* none

-> Behavior: No network interface is attached to the container.

-> Use Case: Security or testing environments where network access is not required.


* container:<name or id>

-> Behavior: Shares the network namespace of another container.

-> Use Case: When multiple containers must behave like a single unit (e.g., for sidecars).








****************************************************************** Ports ************************************

* Container Port: Port inside the container.

* Host Port: Port on your local machine (or host).

* Port Mapping: Connecting host and container ports.

* Example : docker run -d -p 8080:80 nginx

* Host Port	8080

* Container Port	80

* This means: requests to localhost:8080 on your machine go to port 80 inside the nginx container.

* The port we give while running the container should match to the port that the application is running.

* Ex:- Suppose a java application bydefault will run in 8080 port , so while running a container we should mention that 2000:8080 , here 2000 is the port that we use to expose in the outside world and 8080 is the port we use inside the container.

* At the end the port at which appication is running at the code level should match with port inside the container.


************************************************************ Dockerfile ****************************************


# Use a base image with OpenJDK, optimized for smaller size
FROM openjdk:17-jdk-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the compiled JAR file from your build context into the container
# Replace 'your-application.jar' with the actual name of your JAR file
COPY target/your-application.jar /app/your-application.jar

# Expose the port your application listens on (e.g., for a web application)
# Adjust if your application uses a different port
EXPOSE 8080

# Define the command to run your application when the container starts
ENTRYPOINT ["java", "-jar", "your-application.jar"]




**************************************************************Multi build docker file *******************************



# Stage 1: Build the application (Multi-stage build for smaller image size)
FROM maven:3.8.6-openjdk-17 AS build
WORKDIR /app
COPY pom.xml .
COPY src ./src
RUN mvn clean package -DskipTests

# Stage 2: Create the final runtime image
FROM openjdk:17-jdk-slim
WORKDIR /app
COPY --from=build /app/target/*.jar app.jar
EXPOSE 8080 # Or the port your application listens on
ENTRYPOINT ["java", "-jar", "app.jar"]




















