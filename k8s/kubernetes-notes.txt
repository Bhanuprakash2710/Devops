********************************************************** k8s Architecture ******************************************************************

* k8s architecture mainly has 2 components: Master Node and Worker Node 

* Master Node : master node conatains etcd , kube-apiserver, kube-scheduler , kube controller manager and cloud controller manager 

-> kube-apiserver: It used to interact with k8s cluster and exposes the k8s apis . kubectl, user , master node components like kube controller manager and worke node components like kubelet everything will talk with apiserver.

-> etcd: It is like database for k8s cluster . It stores all the master and worker nodes data inside it.

-> kube-scheduler: It will schedule all the pods and also distributes all the containes accross the nodes. It will also assign pods to nodes.

-> kube controller manager: It is responsible for noticing and responding when node or container goes down . It will make decesions to make the containers or nodes up.

-> cloud controller manager: It is not present for on-premsis k8s cluster . It will present in cloud-providers only . If a node is not responding it will check in the cloud provider that the node is deleted or not.

* Worker Node : kubelet and kubeproxy 

-> kubelet: It runs in every node in cluster . It will make sure that all the containers are running in a pod on node.

-> kube-proxy: It maintains network rules on nodes. It will allow network communication to pods.

* Both the master and worker node has conatiner runtime , where all the k8s components runs.

* When ever a cluster is created , bydefault 4 namespaces will be created default,kube-system,kube-public,kube-node-lease


************************************************************************** pods *****************************************************************

* Pod is single instance of an application.

* Pod is a smallest object that we can create in k8s.

* k8s will directly dont deploy containers. Containers are encapsulated into k8s pods.

* To scale up we will create a new pod and to scale down we will delete a new pod.

* We cannot have multiple containers of same kind in a single pod.

* We can have multiple containers of differnet type in a single pod.

* Communication between the containers is easy , as they share the same network space.

* kubectl get pods -o wide -> will display extra info for that pod like on which node it is running.

* If any error withb the pod use kubectl describe pod pod-name , under this event section you can see logs . By checking this logs we can debug the error.

* To debug by entering into container of a pod use -> kubectl exec -it pod-name -- /bin/bash

* kubectl expose pod first-pod --type=LoadBalancer --port=80 --target-port=5000 --name=first-service -> to expose any pod as service 


************************************************************************** Services *******************************************************

* To expose the application which is running on pod in k8s , we use services.

* Cluster ip service is used for internal communication between applications in k8s cluster , with a stable internal ip.

* Cluster ip service create a ip inside the cluster , to enable communicate with other front-end services or back-end service.

* In k8s communication between pods within the same node will be done through service i.e cluster ip service.

* For nodeport service there will be three ports 
  1. Target port -> this is the port of the pod
  2. port ->   this is the port of service
  3. Nodeport -> this is the port of node 
  
* To access the node port in browser we can use http:ip of the node:nodeport. Ex: suppose we have a pod running in node of ip 172.16.22.22 and the nodeport of that node is 30008 then use http:172.16.22.22:30008

* The range of nodeports is 30000-32767 
 
* suppose the pods are distributed accross the different nodes then we can access with any node ip and its nodeport .
 
* Ingress is a advanced loadbalancer service which provides context path based routing .
 
* kubectl describe service service-name -> will give the specific service details , can be useful for debugging.
 
* A Headless Service in Kubernetes is a special type of service that does not assign a cluster IP (i.e., no load balancing). Instead of exposing a single IP address, it directly returns the IP addresses of the individual pods backing the service.
 
* Headless service is mainly used for stateful applications like databases (e.g., MySQL, Cassandra) where clients need to connect to specific pod instances.
 
* To create a Headless service use clusterIp: none
 
* Ingress service provides a way to expose multiple services using a single external IP and route traffic based on hostnames or paths.

* Single application	                     LoadBalancer
  Microservices architecture	             Ingress (with an Ingress Controller)
  Internal communication between service     ClusterIP (default)


 
 
************************************************************************* Deployment *******************************************************

* kubectl create deployment first-deployment --image=stacksimplify/kubenginx:1.0.0

* To scale the rs use -> kubectl scale --replicas=2 deployment/first-deployment

* To expose deployment use -> kubectl expose deployment first-deployment --type=LoadBalancer --port=80 --target-port=80 --name=first-deployment-service

* To set the new image name use -> kubectl set image deployment/first-deployment container-name=stacksimplify/kubenginx:2.0.0 --record=true 

* To check the rollout history use -> kubectl rollout history deployment/first-deployments

* If you want to edit the deployment use -> kubectl edit deployment deployment-name

* In deployment rollback there are 2 options , 1.rollback to previous version 2.rollback to specific version 

* To rollout your deployment to prevoius version use -> kubectl rollout undo deployment/deployment-name

* To rollout to specific vsersion use -> kubectl rollout undo deployment/deployment-name --to-revision=revision-number

* To restart the pods in the deployment use -> kubectl rollout restart deployment/first-deployment

* To pause the deployment use -> kubectl rollout pause deployment/first-deployment

* To resume the deployment use -> kubectl rollout resume deployment/first-deployment
  
  
************************************************************************** Replica sets *******************************************************

* Replica set purpose is to a stable set of replica pods running at any given time.

* If any application crashes(Pods died) replica set will create the pod immediately to ensure that the configured number of pods are running.

* When load becomes more on the existing pods , k8s enables us to easily scale the application , adding additional pods as needed. This is going to seamless and fast.
  
* To check for any errors or logs use -> kubectl describe rs rs-name



************************************************************************ Persistant volumes  ***********************************************

* A Persistent Volume is a piece of storage in the cluster. Itâ€™s created and managed by the cluster administrator.

* It represents a storage resource in the cluster (like a disk, network file system, etc.).

* PVs can be backed by: Google Persistent Disk (GCP), Amazon EBS (AWS), Azure Disk (Azure)

* A Persistent Volume Claim is a request for storage by a pod. It allows a pod to "claim" storage without knowing the underlying storage details.

* A PVC defines: Storage size, Access mode (e.g., ReadWriteOnce), Storage class (if applicable)

* Admin creates a Persistent Volume (PV). A pod requests storage using a Persistent Volume Claim (PVC).

* Kubernetes looks for a suitable PV that matches the request in the PVC. If a match is found, Kubernetes binds the PVC to the PV or else new PV will be created by vvthe cluster and PVC will bound to it. The pod mounts the PV and uses it for storage.


  
*********************************************************************** ConfigMaps ***************************************

* ConfigMaps are used to store and manage configuration data separately from application code. 

* This allows you to keep your application configuration flexible and environment-specific without modifying the containerized application itself.

* In configmaps we store insensitive information like Hostname, database name .

* K8s secret is used to store sensitive information like database-username and database-password.
  
  
  
  

*********************************************************************  k8s commnads  ********************************************

* Kubectl get pods . To see the list of all pods.

* kubectl get pods -o wide . To see more info about pods.

* kubectl describe pod pod-name . To see the info of a particular pod.

* kubectl run nginx --image=nginx . To  create a pod .

* kubectl create deployment nginx --image=nginx . To create deployment in imperative way.

* kubectl delete pod pod-name . Deletes the pod .

* kubectl create -f replicaset.yml . To apply changes for existing rs.

* kubectl edit rs rs-name . To edit the configured rs .

* kubectl create deployment deployment-name --image=image-name --replicas=no-of-replicas . To create a deployment .

* Ex: kubectl create deployment webapp --image=nginx --replicas=3 .

* kubectl create -f deployment.yml . To create deployment.

* kubectl apply -f deployment.yml . To update the deployment.

* kubectl rollout status deployment/myapp-deployment. To check the status of deployment.

* kubectl rollout history deployment/myapp-deployment. To check the history of deployment 

* kubectl rollout undo deployment/myapp-deployment. To rolLback the deployment.

* kubectl set image deploy deployment-name container-name=new-image-name . To change the image in deployment.

* kubect describe deployment deployment-name . To check the info about deployment.

* for pods ready state 2/2 means container running in pod to the total container is pod.s user in MySQL DB

* Connect to MySQL Database using kubectl -> kubectl run -it --rm --image=mysql:8.0 --restart=Never mysql-client -- mysql -h <Kubernetes-ClusterIP-Service> -u <USER_NAME> -p<PASSWORD>

* Replace ClusterIP Service, Username and Password -> kubectl run -it --rm --image=mysql:8.0 --restart=Never mysql-client -- mysql -h mysql -u root -pdbpassword11




********************************************************* Auto Scaling *****************************************************

* Thera are 2 types of autoscaling 1.Vertical AutoScaling , 2.Horizontal AutoScaling

* In vertical autoscaling we will increase the memory size and cpu size. But this is not used in many scenearois.

* In Horizontal pod autoscaling(HPA) we will add the extra vms or servers , we can say we add replicas .



************************************************* Yaml files ***********************************************

* Api versions for different kinds

      Kind          ApiVersiom
      
      pods              v1
      services          v1
      Deployment       apps/v1
      Replicasets      apps/v1
      
      
* To link a deplopyment and a service  copy the selector, matchlabels part of deployment into selectors part of a service.
* In docker we use networks to communicate with in containers. In k8s we services to communicate with pods.


************************************************ Helm *****************************************************
     
* Use helmify to convert the kubernetes manifest into helm charts
* 1. pwd should the deployment-service.yaml files
* 2. Run cat *.yaml | helmify helm-chart-folder-name
* 3. Check the files.
